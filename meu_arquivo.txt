python -m site
python -m venv .venv
source .venv/bin/activate
python -m site
code --user-data-dir .vscodelocal
echo ".vscodelocal" >> .gitignore


git push -u origin HEAD

ctrl + shit + p
python interpreter
selecionar o venv

python -m dundie add --to=joao --value=800
pip install --upgrade pip
python setup.py build
tree -L 2 build
#instalação local e editável
pip install -e .
pip list
git push -u origin HEAD


ls .venv/bin
#por dundie
ipython
from dundie import __main__
type(__main__)
callable(__main__)

git stash
git stash pop

pip install -e '.[dev]'
pip show ipython
pip install -e '.[dev]'
pip install -r requirements.test.txt

--listar módulos
pip list

--Arquitetura de imports do projeto
python -m site

--importar o pytest
pip install -e '.[test]'

doctests
Dá para colocar em comentários:
    >>> len(load('assets/people.csv'))
    2

Ai executamos:
python -m doctest dundie/core.py
python -m doctest -v dundie/core.py

Dá para colocar mais de um em comentários:
    >>> len(load('assets/people.csv'))
    2
    >>> len(load('assets/people.csv'))[0][0]
    'D'

Modo verboso para parar no breakpoint
pytest -vv -s
pip install pytest-watch

Executar por marca:
pytest -s -m "high"
pytest -s -m "unit and high"
pytest -s -m "unit"

Relatório
pytest -s -m "unit" --junitxml=/tmp/result.xml


qulity assurency
pflake8
configurado no pyproject
Linhas que não quero marcar 
# noqa
